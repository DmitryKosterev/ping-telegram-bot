#include <iostream>
#include <fstream>
#include <string>
#include <thread>
#include <unordered_map>
#include <atomic>
#include <chrono>
#include <cstdlib>
#include <ctime>
#include <mutex>
#include <queue>
#include <functional>
#include <condition_variable>
#include <vector>
#include <tgbot/tgbot.h>
#include <unordered_set>

#include "db.hpp"
#include "ping.hpp"
#include "ping_session.hpp"
#include "dispatcher.hpp"

using namespace std;
using namespace TgBot;


// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π
unordered_map<long long, PingSession> sessions;
mutex sessionMutex;

unordered_set<long long> awaitingIpInput;
mutex inputMutex;

void generateGraphForIp(long long chatId, const string& ip) {
    string command = "python draw_graph.py " + to_string(chatId) + " " + ip;
    system(command.c_str());
}

void handleStart(Bot& bot, Message::Ptr message) {
    bot.getApi().sendMessage(message->chat->id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ping Bot! –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –ø–æ–∫–∞ —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
}

void initiateCommands(Bot& bot, Message::Ptr message) {
    bot.getApi().sendMessage(message->chat->id, "C–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n"
        "/add_ip ip-address - –¥–æ–±–∞–≤–∏—Ç—å IP-–∞–¥—Ä–µ—Å –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/remove_ip ip-address - —É–±—Ä–∞—Ç—å IP-–∞–¥—Ä–µ—Å –∏–∑ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/list_ips - —Å–ø–∏—Å–æ–∫ IP-–∞—Ä–µ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n"
        "/ping ip-address ‚Äî –Ω–∞—á–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ IP-–∞–¥—Ä–µ—Å–∞ (–æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)\n"
        "/stop ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥\n"
        "/report ip-address ‚Äî –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –∏ –≥—Ä–∞—Ñ–∏–∫ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É IP-–∞–¥—Ä–µ—Å—É");
}

// –ö–æ–º–∞–Ω–¥–∞: /add_ip IP ‚Äî –¥–æ–±–∞–≤–∏—Ç—å IP –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
void handleAddIp(Bot& bot, Message::Ptr message) {
    long long chatId = message->chat->id;
    string text = message->text;
    if (text.length() <= 8) {
        bot.getApi().sendMessage(chatId, "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_ip");
        return;
    }
    string ip = text.substr(8);
    if (ip.empty()) {
        bot.getApi().sendMessage(chatId, "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add_ip");
        return;
    }

    if (addMonitoredIp(chatId, ip)) {
        bot.getApi().sendMessage(chatId, "IP-–∞–¥—Ä–µ—Å " + ip + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.");
    }
    else {
        bot.getApi().sendMessage(chatId, "IP-–∞–¥—Ä–µ—Å —É–∂–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ.");
    }
}
void sendIpList(Bot& bot, long long chatId) {
    vector<string> ips = getMonitoredIps(chatId);
    InlineKeyboardMarkup::Ptr keyboard(new InlineKeyboardMarkup);

    if (ips.empty()) {
        InlineKeyboardButton::Ptr addBtn(new InlineKeyboardButton);
        addBtn->text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å IP";
        addBtn->callbackData = "add_ip";

        keyboard->inlineKeyboard.push_back({ addBtn });
        bot.getApi().sendMessage(chatId, "üì≠ –°–ø–∏—Å–æ–∫ IP-–∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—É—Å—Ç.", false, 0, keyboard);
        return;
    }

    for (const auto& ip : ips) {
        InlineKeyboardButton::Ptr pingBtn(new InlineKeyboardButton);
        pingBtn->text = "üì° " + ip;
        pingBtn->callbackData = "ping_" + ip;

        InlineKeyboardButton::Ptr reportBtn(new InlineKeyboardButton);
        reportBtn->text = "üìä";
        reportBtn->callbackData = "report_" + ip;

        InlineKeyboardButton::Ptr delBtn(new InlineKeyboardButton);
        delBtn->text = "‚ùå";
        delBtn->callbackData = "del_" + ip;

        keyboard->inlineKeyboard.push_back({ pingBtn, reportBtn, delBtn });
    }

    InlineKeyboardButton::Ptr stopBtn(new InlineKeyboardButton);
    stopBtn->text = "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥";
    stopBtn->callbackData = "stop_monitoring";

    keyboard->inlineKeyboard.push_back({ stopBtn });

    InlineKeyboardButton::Ptr addBtn(new InlineKeyboardButton);
    addBtn->text = "‚ûï –î–æ–±–∞–≤–∏—Ç—å IP";
    addBtn->callbackData = "add_ip";

    keyboard->inlineKeyboard.push_back({ addBtn });

    bot.getApi().sendMessage(chatId, "–í—ã–±–µ—Ä–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –ø–∏–Ω–≥–∞, –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è:", false, 0, keyboard);
}
// –ö–æ–º–∞–Ω–¥–∞: /list_ip ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ IP –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞

void handleListIp(Bot& bot, Message::Ptr message) {
    sendIpList(bot, message->chat->id);
}

void startPing(Bot& bot, Message::Ptr message) {
    string ip;
    long long chatId = message->chat->id;
    try {
        ip = message->text.substr(6);
        if (ip.empty()) {
            bot.getApi().sendMessage(chatId, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ping");
            return;
        }
    }
    catch (...) {
        bot.getApi().sendMessage(chatId, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ /ping IP");
        return;
    }

    lock_guard<mutex> lock(sessionMutex);
    if (sessions.count(chatId)) {
        bot.getApi().sendMessage(chatId, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.");
        return;
    }

    addMonitoredIp(chatId, ip);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ map –ø—É—Å—Ç–æ–π PingSession —Å ip
    auto& session = sessions[chatId];
    session.ip = ip;

    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Å—Å—ã–ª–∫—É –Ω–∞ stopFlag –≤–Ω—É—Ç—Ä–∏ sessions
    session.pingThread = thread(pingFunction, ref(bot), message, ip, ref(session.stopFlag));
    logIncident(chatId, ip, "Connected");
    bot.getApi().sendMessage(chatId, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: " + ip);
}

// –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
void stopPing(Bot& bot, Message::Ptr message) {
    lock_guard<mutex> lock(sessionMutex);
    auto it = sessions.find(message->chat->id);
    if (it == sessions.end()) {
        bot.getApi().sendMessage(message->chat->id, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∑–∞–ø—É—â–µ–Ω.");
        return;
    }

    it->second.stopFlag = true;
    if (it->second.pingThread.joinable()) {
        it->second.pingThread.join();
    }
    sessions.erase(it);

    bot.getApi().sendMessage(message->chat->id, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
}

void handleRemove(Bot& bot, Message::Ptr message) {
    long long chatId = message->chat->id;
    string text = message->text;
    
    if (text.length() <= 10) {
        bot.getApi().sendMessage(chatId, "–û—à–∏–±–∫–∞: —É–∫–∞–∂–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /remove_ip");
        return;
    }

    string ip = text.substr(11);  // –ø–æ—Å–ª–µ "/remove_ip "

    if (removeMonitoredIp(chatId, ip)) {
        bot.getApi().sendMessage(chatId, "IP-–∞–¥—Ä–µ—Å " + ip + " —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.");
    }
    else {
        bot.getApi().sendMessage(chatId, "IP-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.");
    }
}

void handleReport(Bot& bot, Message::Ptr message) {
    long long chatId = message->chat->id;
    string ip;

    try {
        ip = message->text.substr(8);
        if (ip.empty()) {
            bot.getApi().sendMessage(chatId, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /report");
            return;
        }
    }
    catch (...) {
        bot.getApi().sendMessage(chatId, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É IP-–∞–¥—Ä–µ—Å—É");
        return;
    }

    string csvFile = "report_" + to_string(chatId) + "_" + ip + ".csv";
    string pngFile = "graph_" + to_string(chatId) + "_" + ip + ".png";

    getDataFromDatabaseByIp(csvFile, chatId, ip);
    generateGraphForIp(chatId, ip);

    ifstream f1(csvFile), f2(pngFile);
    if (!f1 || f1.peek() == EOF || !f2 || f2.peek() == EOF) {
        bot.getApi().sendMessage(chatId, "–û—à–∏–±–∫–∞: –æ—Ç—á–µ—Ç –∏–ª–∏ –≥—Ä–∞—Ñ–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.");
        return;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ PNG
    bot.getApi().sendPhoto(chatId, InputFile::fromFile(pngFile, "image/png"),
        "–ì—Ä–∞—Ñ–∏–∫ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ IP –ê–¥—Ä–µ—Å–∞: " + ip);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ CSV
    bot.getApi().sendDocument(chatId, InputFile::fromFile(csvFile, "text/csv"),
        "–û—Ç—á–µ—Ç –ø–æ IP –ê–¥—Ä–µ—Å—É: " + ip);
}

void handleCallbackQuery(Bot& bot, CallbackQuery::Ptr query) {
    string data = query->data;
    long long chatId = query->from->id;

    if (data.find("ping_") == 0) {
        string ip = data.substr(5);

        if (sessions.count(chatId)) {
            bot.getApi().sendMessage(chatId, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.");
            return;
        }

        Message::Ptr fakeMsg(new Message(*query->message));
        fakeMsg->text = "/ping " + ip;

        startPing(bot, fakeMsg);
    }
    else if (query->data.find("del_") == 0) {
        string ip = query->data.substr(4);

        InlineKeyboardMarkup::Ptr confirmKb(new InlineKeyboardMarkup);

        InlineKeyboardButton::Ptr yesBtn(new InlineKeyboardButton);
        yesBtn->text = "‚úÖ –î–∞";
        yesBtn->callbackData = "confirm_del_" + ip + "|" + to_string(query->message->messageId);  // <- –ø–µ—Ä–µ–¥–∞—ë–º ID —Å—Ç–∞—Ä–æ–≥–æ –º–µ–Ω—é

        InlineKeyboardButton::Ptr noBtn(new InlineKeyboardButton);
        noBtn->text = "‚ùå –ù–µ—Ç";
        noBtn->callbackData = "cancel|" + to_string(query->message->messageId);  // <- —Ç–æ–∂–µ

        confirmKb->inlineKeyboard.push_back({ yesBtn, noBtn });

        bot.getApi().sendMessage(query->from->id,
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å IP-–∞–¥—Ä–µ—Å: " + ip + "? –ò—Å—Ç–æ—Ä–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç–∞–∫–∂–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–∏—Ç—Å—è",
            false, 0, confirmKb);
    }
    else if (query->data.find("confirm_del_") == 0) {
        string payload = query->data.substr(12);
        size_t sep = payload.find('|');
        string ip = payload.substr(0, sep);
        int oldMsgId = stoi(payload.substr(sep + 1));
        long long chatId = query->from->id;

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∏ —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é
        bot.getApi().deleteMessage(chatId, query->message->messageId);
        bot.getApi().deleteMessage(chatId, oldMsgId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥—ë—Ç –ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ —ç—Ç–æ–º—É IP
        {
            lock_guard<mutex> lock(sessionMutex);
            auto it = sessions.find(chatId);
            if (it != sessions.end() && it->second.ip == ip) {
                it->second.stopFlag = true;
                if (it->second.pingThread.joinable()) {
                    it->second.pingThread.join();
                }
                sessions.erase(it);
                bot.getApi().sendMessage(chatId, "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ IP " + ip + " –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.");
            }
        }

        // –£–¥–∞–ª—è–µ–º IP –∏–∑ –ë–î
        if (removeMonitoredIp(chatId, ip)) {
            bot.getApi().sendMessage(chatId, "‚úÖ IP " + ip + " —É–¥–∞–ª—ë–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.");
        }
        else {
            bot.getApi().sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å IP: " + ip);
            return;
        }

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –º–µ–Ω—é IP
        sendIpList(bot, chatId);
    }

    else if (query->data.find("cancel|") == 0) {
        int oldMsgId = stoi(query->data.substr(7));
        long long chatId = query->from->id;

        // –£–¥–∞–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.getApi().deleteMessage(chatId, query->message->messageId);

        bot.getApi().sendMessage(chatId, "‚ùé –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
    }

    else if (query->data == "cancel") {
        // –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        bot.getApi().deleteMessage(query->message->chat->id, query->message->messageId);
        bot.getApi().sendMessage(chatId, "‚ùé –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
    }
    else if (data.find("report_") == 0) {
        string ip = data.substr(7);

        // –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å handleReport
        Message::Ptr fakeMsg(new Message(*query->message));
        fakeMsg->text = "/report " + ip;

        handleReport(bot, fakeMsg);
    }
    else if (query->data == "stop_monitoring") {
        Message::Ptr fakeMsg(new Message(*query->message));
        fakeMsg->chat = query->message->chat;
        stopPing(bot, fakeMsg);
    }
    else if (data == "add_ip") {
        long long chatId = query->from->id;

        {
            lock_guard<mutex> lock(inputMutex);
            awaitingIpInput.insert(chatId);
        }

        bot.getApi().deleteMessage(chatId, query->message->messageId);
        bot.getApi().sendMessage(chatId, "–í–≤–µ–¥–∏—Ç–µ IP-–∞–¥—Ä–µ—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:");
    }
}

int main() {
    initDatabase();

    Bot bot("6338517569:AAF5WRHNL00b26aNP1NAroT0T5omOY-n6dw");

    // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä —Å–æ–±—ã—Ç–∏–π
    thread dispatcherThread(eventDispatcher);
    dispatcherThread.detach();

    bot.getEvents().onCommand("start", [&bot](Message::Ptr message) {
        handleStart(bot, message);
        handleListIp(bot, message);
        });

    bot.getEvents().onCommand("help", [&bot](Message::Ptr message) {
        initiateCommands(bot, message);
        });
    bot.getEvents().onCommand("add_ip", [&bot](Message::Ptr message) {
        handleAddIp(bot, message);
        });

    bot.getEvents().onCommand("list_ips", [&bot](Message::Ptr message) {
        handleListIp(bot, message);
        });

    bot.getEvents().onCommand("ping", [&bot](Message::Ptr message) {
        startPing(bot, message);
        });

    bot.getEvents().onCommand("stop", [&bot](Message::Ptr message) {
        stopPing(bot, message);
        });

    bot.getEvents().onCommand("report", [&bot](Message::Ptr message) {
        handleReport(bot, message);
        });

    bot.getEvents().onCallbackQuery([&bot](CallbackQuery::Ptr query) {
        handleCallbackQuery(bot, query);
        });
    bot.getEvents().onCommand("remove_ip", [&bot](Message::Ptr message) {
        handleRemove(bot, message);
        });
    bot.getEvents().onAnyMessage([&](Message::Ptr message) {
        long long chatId = message->chat->id;

        {
            lock_guard<mutex> lock(inputMutex);
            if (awaitingIpInput.count(chatId)) {
                awaitingIpInput.erase(chatId);
                string ip = message->text;

                if (ip.empty()) {
                    bot.getApi().sendMessage(chatId, "‚ùå IP-–∞–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
                    return;
                }

                if (addMonitoredIp(chatId, ip)) {
                    bot.getApi().sendMessage(chatId, "‚úÖ IP " + ip + " –¥–æ–±–∞–≤–ª–µ–Ω.");
                }
                else {
                    bot.getApi().sendMessage(chatId, "‚ö†Ô∏è IP " + ip + " —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ.");
                }

                sendIpList(bot, chatId);
                return;
            }
        }

        // –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...
        });
    try {
        TgLongPoll longPoll(bot);
        cout << "Bot started. Username: " << bot.getApi().getMe()->username << endl;
        while (true) {
            longPoll.start();
        }
    }
    catch (exception& e) {
        cerr << "Bot error: " << e.what() << endl;
    }

    dispatcherThread.join();
    return 0;
}

 //"6338517569:AAF5WRHNL00b26aNP1NAroT0T5omOY-n6dw");